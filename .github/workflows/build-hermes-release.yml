name: Build Hermes and upload to GitHub releases

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/build-hermes-release.yml'
      - 'hermes/**'

jobs:
  # Build Hermes for iOS
  build_hermes_ios:
    name: Build Hermes for iOS (release)
    runs-on: macos-15
    env:
      HERMES_WS_DIR: ${{ github.workspace }}
    steps:
      # Setup
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jwlawson/actions-setup-cmake@v2
      - uses: seanmiddleditch/gha-setup-ninja@master

      # Prepare cache
      - name: Restore CMake build cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-build-ios-cache
          path: |
            build
            hermes/build_appletvos
            hermes/build_appletvsimulator
            hermes/build_catalyst
            hermes/build_host_hermesc
            hermes/build_iphoneos
            hermes/build_iphonesimulator
            hermes/build_xros
            hermes/build_xrsimulator
            hermes/destroot

      # Build
      - name: Build Hermes (+compiler) for host
        run: |
          cmake -S hermes -B build -G Ninja
          cmake --build ./build
      - name: Build Hermes iOS Framework
        run: |
          cd hermes
          ./utils/build-ios-framework.sh

      - name: Log outputs
        run: ls -laR hermes/destroot

      # Upload
      - name: Prepare folders for zip
        run: |
          mkdir tmp_zip_workspace
          cp -r hermes/destroot/include tmp_zip_workspace/include
          cp -r hermes/destroot/Library/Frameworks/* tmp_zip_workspace
      - name: Zip the .xcframework + include Headers
        run: |
          cd tmp_zip_workspace
          zip -r ../Hermes-Apple.zip *

      - name: Upload Hermes-Apple.zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Hermes-Apple.zip
          path: Hermes-Apple.zip

      - name: Zip Hermes itself
        run: |
          cd build/bin
          zip ../../hermes-debug.zip hermes
      - name: Upload Hermes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hermes-debug-macos.zip
          path: hermes-debug.zip

  # Build Hermes for Android
  build_hermes_android:
    name: Build Hermes for Android (release)
    runs-on: ubuntu-22.04
    env:
      HERMES_WS_DIR: ${{ github.workspace }}
    steps:
      # Setup
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Install dependencies
        run: |-
          sudo apt update
          sudo apt install -y git openssh-client cmake build-essential \
              libreadline-dev libicu-dev zip python3 ninja-build

      # Prepare cache
      - name: Restore CMake build cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-buildcache
          path: |
            build
            build_android
            hermes/build_host_hermesc

      # Build
      - name: Build Hermes (+compiler) for host
        run: |
          cmake -S hermes -B build -G Ninja
          cmake --build ./build
      - name: Build Hermes Android framework
        run: |
          cd hermes/android
          ./gradlew githubRelease --build-cache

      - name: Log outputs
        run: ls -laR build_android

      - name: Zip the .aar and .so files
        run: |
          cd build_android/outputs
          zip -r ../../Hermes-Android.zip *

      - name: Upload Hermes-Android.zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Hermes-Android.zip
          path: Hermes-Android.zip

      - name: Zip Hermes itself
        run: |
          cd build/bin
          zip ../../hermes-debug.zip hermes
      - name: Upload Hermes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hermes-debug-linux.zip
          path: hermes-debug.zip

      # Gradle cache doesn't like daemons
      - name: Stop Gradle Daemon
        run: cd ./hermes/android && ./gradlew --stop

  create_github_release:
    name: Create GitHub Release with both Artifacts
    needs: [build_hermes_ios, build_hermes_android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download Hermes-Apple.zip
        uses: actions/download-artifact@v4
        with:
          name: Hermes-Apple.zip

      - name: Download Hermes-Android.zip
        uses: actions/download-artifact@v4
        with:
          name: Hermes-Android.zip

      - name: Download hermes-debug-macos.zip
        uses: actions/download-artifact@v4
        with:
          name: hermes-debug-macos.zip

      - name: Download hermes-debug-linux.zip
        uses: actions/download-artifact@v4
        with:
          name: hermes-debug-linux.zip

      - name: Get latest release tag
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            // List releases (most recent first)
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            // If no releases exist, start with v0.0.0
            if (releases.data.length === 0) {
              return "v0.0.0";
            }
            return releases.data[0].tag_name;

      - name: Bump patch version
        id: bump_version
        run: |
          # Get the latest tag from the previous step
          LATEST_TAG="${{ steps.get_latest_release.outputs.result }}"
          echo "Latest tag: $LATEST_TAG"

          # Remove the "v" prefix and split into components (assuming format vMAJOR.MINOR.PATCH)
          VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New tag: $NEW_TAG"

          # Set Description to Hermes version
          HERMES_COMMIT="$(git rev-parse HEAD:hermes)"
          HERMES_COMMIT_SHORT="$(git rev-parse --short HEAD:hermes)"
          TAG_DESCRIPTION="Release build of [Hermes ${HERMES_COMMIT_SHORT}](https://github.com/facebook/hermes/commit/$HERMES_COMMIT)."

          # Use the new GitHub Actions recommended way to set output
          echo "tag_name=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "tag_description=$TAG_DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump_version.outputs.tag_name }}
          body: ${{ steps.bump_version.outputs.tag_description }}
          make_latest: true
          files: |
            Hermes-Apple.zip
            Hermes-Android.zip
            hermes-debug-macos.zip
            hermes-debug-linux.zip
